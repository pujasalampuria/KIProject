<KnowledgeItem ID="OpexSoftware:Consul:ConsulWorkflowHandlePKG" xmlns="http://www.arago.de/KiSchema">
	<Title>ConsulWorkflowHandlePKG</Title>
	<Description>Initiates the workflow for handling packages related to the installation of Consul
		by writing into the MARS model and creating new corresponding DataBlocks in the Issue.
	</Description>

	<BindAttributes>
		<AttributeFilter Name="NodeType" Mode="string" Value="Machine" />
		<RelatedNode Mode="predecessor" Alias="PRE">
			<AttributeFilter Name="NodeType" Mode="string" Value="Application" />
		</RelatedNode>
	</BindAttributes>

	<Log>__KI ${KIID} is now bound to ${NODE:NodeID}__</Log>

	<CreateTrigger>
		<IssueCondition>
			<Description>Searches for an Issue with DataBlock ConsulWorkflowHandlePKG and the
				necessary information for successful completion of workflow.
			</Description>
			<SubItem Name="ConsulWorkflowHandlePKG" Alias="CWHP">
				<AttributeFilter Name="TargetApp" Mode="string" Value="${PRE:NodeName}" />
				<AttributeFilter Name="TargetMachine" Mode="string" Value="${NODE:NodeName}" />
				<AttributeFilter Name="User" Mode="exists" />
				<AttributeFilter Name="Host" Mode="exists" />
				<AttributeFilter Name="Port" Mode="exists" />
				<AttributeFilter Name="TargetState" Mode="string" Value="Created" />
				<AttributeFilter Name="Status" Mode="notexists" />
			</SubItem>
		</IssueCondition>

		<Activate>
			<SetAttribute Name="CWHP:Status" Value="WorkflowStarted" />

			<GenerateData Alias="PROTASKS">
				<DataType>ProcessingTasks</DataType>
				<CurrentTask>1</CurrentTask>
			</GenerateData>

			<!-- TASK1 install required libraries -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${CWHP:TargetMachine}      
				TargetState=Created
				User=${CWHP:User}
				Host=${CWHP:Host}
				Lib=RUNCOMMAND
				Command='sudo apt install linux-image-extra-\`uname -r\`'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!-- TASK2 updated apt repo with docker uri -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${CWHP:TargetMachine}      
				TargetState=Created
				User=${CWHP:User}
				Host=${CWHP:Host}
				Lib=RUNCOMMAND
				Command='sudo sh -c &apos;wget -qO- https://get.docker.io/gpg | apt-key add -&apos;'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!-- TASK3 update source list with docker information -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${CWHP:TargetMachine}      
				TargetState=Created
				User=${CWHP:User}
				Host=${CWHP:Host}
				Lib=RUNCOMMAND
				Command='sudo sh -c \&quot;echo deb https://get.docker.com/ubuntu docker main > /etc/apt/sources.list.d/docker.list\&quot;'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>


			<!-- TASK4 run apt updated to get the latest information -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${CWHP:TargetMachine}      
				TargetState=Created
				User=${CWHP:User}
				Host=${CWHP:Host}
				Lib=RUNCOMMAND
				Command='sudo apt update'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!-- TASK5 Run Command to install lxc-docker -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${CWHP:TargetMachine}      
				TargetState=Created
				User=${CWHP:User}
				Host=${CWHP:Host}
				Lib=PKG
				PKG=lxc-docker
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!-- TASK6 Run command to create sever - client container -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${CWHP:TargetMachine}      
				TargetState=Created
				User=${CWHP:User}
				Host=${CWHP:Host}
				Lib=RUNCOMMAND
				Command='sudo docker run -d --name server -h server pujasalampuria/consul:server'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!-- TASK7 Run command to create bootstrap server container and link it with the server-client container -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${CWHP:TargetMachine}      
				TargetState=Created
				User=${CWHP:User}
				Host=${CWHP:Host}
				Lib=RUNCOMMAND
				Command='sudo docker run -d --link server:server --name bserver -h bserver pujasalampuria/consul:bootstrapserver'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!-- TASK8 Run command to create webserver container -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${CWHP:TargetMachine}      
				TargetState=Created
				User=${CWHP:User}
				Host=${CWHP:Host}
				Lib=RUNCOMMAND
				Command='sudo docker run -it -d --name webserver -h webserver -p ${CWHP:Port}:8500 pujasalampuria/consul:webserver'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!-- TASK9 get IP of webserver and bootstrap server container and start consul server UI -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks 
                PKG=ScriptTest
                TargetMachine=${CWHP:TargetMachine}
                TargetState=Created
                User=${CWHP:User}
                Host=${CWHP:Host}
                Script='WebServerIP=$(sudo docker inspect --format &apos;{{.NetworkSettings.IPAddress}}&apos; webserver)
                BootStrapServerIP=$(sudo docker inspect --format &apos;{{.NetworkSettings.IPAddress}}&apos; bserver)
                sudo docker exec -d webserver consul agent  -data-dir /tmp/consul -client $WebServerIP -ui-dir /webconsul -join $BootStrapServerIP'
				Lib=RUNSCRIPT
                CurrentState=ReadState
                TaskNumber=${PROTASKS:NumberTotal}
                /> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!-- Uncomment below TASK10 and TASK11 to change the Bootstrap server to simple server -->
			
			<!-- TASK10 rename the script to start the server in normal server mode, instead of bootstrap server -->
			<!-- 
			<IncAttribute Name="PROTASKS:NumberTotal" /> 
			
			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks 
				TargetMachine=${CWHP:TargetMachine} 
				TargetState=Created User=${CWHP:User} 
				Host=${CWHP:Host} 
				Lib=RUNCOMMAND Command='sudo docker exec -d bserver mv /consul/serverStart.sh /consul/start.sh' 
				CurrentState=ReadState 
				TaskNumber=${PROTASKS:NumberTotal} 
				/> </NewBlock>]]> 
			</XMLExtract> 
			
			<GenerateData Alias="VAL"> 
				<DataType>Validate</DataType> 
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID> 
			</GenerateData> 
			-->
			<!-- TASK11 restart bootstrap server container -->
			<!-- 
			<IncAttribute Name="PROTASKS:NumberTotal" /> 
			
			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks 
				TargetMachine=${CWHP:TargetMachine} 
				TargetState=Created 
				User=${CWHP:User} 
				Host=${CWHP:Host} 
				Lib=RUNCOMMAND 
				Command='sudo docker stop bserver && sudo docker start bserver' 
				CurrentState=ReadState 
				TaskNumber=${PROTASKS:NumberTotal} 
				/> </NewBlock>]]> 
			</XMLExtract> 
			
			<GenerateData Alias="VAL"> 
				<DataType>Validate</DataType> 
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID> 
			</GenerateData> 
			-->

			<GenerateData>
				<DataType>Resolve</DataType>
				<Status>checkForResolve</Status>
			</GenerateData>
		</Activate>
	</CreateTrigger>
</KnowledgeItem>