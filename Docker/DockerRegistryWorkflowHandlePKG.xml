<KnowledgeItem ID="OpexSoftware:Docker:DockerRegistryWorkflowHandlePKG" xmlns="http://www.arago.de/KiSchema">
	<Title>DockerRegistryWorkflowHandlePKG</Title>
	<Description>Initiates the workflow for installing private Docker-Registry.
	</Description>
	<BindAttributes>
		<RelatedNode Mode="predecessor" Alias="PRE">
			<AttributeFilter Name="NodeType" Mode="string" Value="Application" />
		</RelatedNode>
	</BindAttributes>

	<Log>__KI ${KIID} is now bound to ${NODE:NodeID}__</Log>

	<CreateTrigger>
		<IssueCondition>
			<Description>Searches for an Issue with DataBlock DockerRegistryWorkflowHandlePKG
				and triggers the workflow for successful completion.
			</Description>
			<SubItem Name="DockerRegistryWorkflowHandlePKG" Alias="DRWHP">
				<AttributeFilter Name="TargetMachine" Mode="string" Value="${NODE:NodeName}" />
				<AttributeFilter Name="TargetState" Mode="string" Value="Created" />
				<AttributeFilter Name="Status" Mode="notexists" />
				<AttributeFilter Name="User" Mode="exists" />
				<AttributeFilter Name="Host" Mode="exists" />
				<AttributeFilter Name="TargetApp" Mode="string" Value="${PRE:NodeName}" />
			</SubItem>
		</IssueCondition>

		<Activate>
			<SetAttribute Name="DRWHP:Status" Value="WorkflowStarted" />
			<GenerateData Alias="PROTASKS">
				<DataType>ProcessingTasks</DataType>
				<CurrentTask>1</CurrentTask>
			</GenerateData>

			<!--Task1 Install preequisites package build-essential -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${DRWHP:TargetMachine}      
				TargetState=Created
				User=${DRWHP:User}
				Lib=PKG
				Host=${DRWHP:Host}
				PKG='build-essential'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>
			
			<!--Task2 Install preequisites package python-dev -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${DRWHP:TargetMachine}      
				TargetState=Created
				User=${DRWHP:User}
				Lib=PKG
				Host=${DRWHP:Host}
				PKG='python-dev'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!--Task3 Install preequisites package libevent-dev -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${DRWHP:TargetMachine}      
				TargetState=Created
				User=${DRWHP:User}	
				Lib=PKG
				Host=${DRWHP:Host}
				PKG='libevent-dev'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!--Task4 Install preequisites package python-pip -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${DRWHP:TargetMachine}      
				TargetState=Created
				User=${DRWHP:User}
				Lib=PKG
				Host=${DRWHP:Host}
				PKG='python-pip'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!--Task5 Install preequisites package liblzma-dev -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${DRWHP:TargetMachine}      
				TargetState=Created
				User=${DRWHP:User}
				Lib=PKG
				Host=${DRWHP:Host}
				PKG='liblzma-dev'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!--Task6 Install prerequisites package swig -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${DRWHP:TargetMachine}      
				TargetState=Created
				User=${DRWHP:User}
				Lib=PKG
				Host=${DRWHP:Host}
				PKG=swig
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!--Task7 Install docker-registry -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${DRWHP:TargetMachine}      
				TargetState=Created
				User=${DRWHP:User}
				Host=${DRWHP:Host}
				Lib=RUNCOMMAND
				Command='sudo pip install docker-registry'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!--Task8 Create config.yml file and a directory in var named docker-registry -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${DRWHP:TargetMachine}      
				TargetState=Created
				User=${DRWHP:User}
				Host=${DRWHP:Host}
				Lib=RUNCOMMAND
				Command='cd /usr/local/lib/python2.7/dist-packages/docker_registry/lib/../../config/ &amp;&amp; sudo cp config_sample.yml config.yml &amp;&amp; sudo mkdir /var/docker-registry'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!--Task9 Replace the /tmp to /var in config.yml -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${DRWHP:TargetMachine}      
				TargetState=Created
				User=${DRWHP:User}
				Host=${DRWHP:Host}
				Lib=RUNCOMMAND
				Command='sudo sed -i &apos;s/\/var/\/tmp/&apos; /usr/local/lib/python2.7/dist-packages/docker_registry/lib/../../config/config.yml'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!--Task10 Create a directory named docker-registry -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${DRWHP:TargetMachine}      
				TargetState=Created
				User=${DRWHP:User}
				Host=${DRWHP:Host}
				Lib=RUNCOMMAND
				Command='sudo mkdir -p /var/log/docker-registry'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!--Task11 Write a file to execute the command -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${DRWHP:TargetMachine}      
				TargetState=Created
				User=${DRWHP:User}
				Lib=FILECREATE
				FilePath='/etc/init'
				FileName=docker-registry.conf
				FileContent='description &apos;Docker Registry&apos; \nstart on runlevel [2345] \nstop on runlevel [016] \nrespawn \nrespawn limit 10 5 \nscript \nexec gunicorn --access-logfile /var/log/docker-registry/access.log --error-logfile /var/log/docker-registry/server.log -k gevent --max-requests 100 --graceful-timeout 3600 -t 3600 -b localhost:5000 -w 8 docker_registry.wsgi:application \nend script'
				Host=${DRWHP:Host}
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}/> 
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!--Task12 Start the docker-registry service -->
			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${DRWHP:TargetMachine}      
				TargetState=Created
				User=${DRWHP:User}
				Host=${DRWHP:Host}
				Lib=RUNCOMMAND
				Command='sudo service docker-registry start'
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!-- Resolved initial Issue with ID ${IID} - use if ChildIssues are created -->
			<GenerateData>
				<DataType>Resolve</DataType>
				<Status>checkForResolve</Status>
			</GenerateData>
		</Activate>
	</CreateTrigger>
</KnowledgeItem>