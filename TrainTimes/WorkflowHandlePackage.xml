<KnowledgeItem ID="arago:WorkflowUserStory:PKG:WorkflowHandlePackage" xmlns="http://www.arago.de/KiSchema">
	<Title>WorkflowHandlePackage</Title>
	<Description>Initiates the workflow for handling packages by writing into the MARS model and creating new corresponding data blocks in the Issue</Description>

	<BindAttributes>
		<AttributeFilter Name="NodeType" Mode="string" Value="Machine"/>
		<RelatedNode Mode="predecessor" Alias="PRE">
			<AttributeFilter Name="NodeType" Mode="string" Value="Application"/>
		</RelatedNode>
	</BindAttributes>

	<Log>__KI ${KIID} is now bound to ${NODE:NodeID}__</Log>

	<CreateTrigger>

		<IssueCondition>
			<Description>Searches for an Issue with DataBlock OPEXHandlePKG and the necessary information for sucessful completion of workflow</Description>
			<SubItem Name="OPEXHandlePKG" Alias="OHP">
				<AttributeFilter Name="TargetApp" Mode="string" Value="${PRE:NodeName}"/>
				<AttributeFilter Name="TargetMachine" Mode="string" Value="${NODE:NodeName}"/>
				<AttributeFilter Name="PKG1" Mode="exists"/>
        <AttributeFilter Name="PKG2" Mode="exists"/>
        <AttributeFilter Name="PKG3" Mode="exists"/>
				<AttributeFilter Name="TargetState" Mode="string" Value="InstallUninstall"/>
				<AttributeFilter Name="Status" Mode="notexists"/>
				
			</SubItem>
		</IssueCondition>

		<Activate>
			
			<SetAttribute Name="OHP:Status" Value="WorkflowStarted" /> 
			
			<GenerateData Alias="PROTASKS"> 
				<DataType>ProcessingTasks</DataType> 
			</GenerateData>
			
           <!-- TASK1-->
           
			<IncAttribute Name="PROTASKS:NumberTotal"/>
			
			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks 
				PKG=${OHP:PKG1}
				TargetMachine=${OHP:TargetMachine}      
				TargetState=Created
				User=${OHP:User}
				Lib=${OHP:Lib}
				Host=${OHP:Host}
				CurrentState=ReadState
				/> </NewBlock>]]>
			</XMLExtract>
			
 
      
			<GenerateData Alias="VAL"> 
				<!-- Independent="true" can be applied, if multiple Issues should be generated. In this case pass on the parent IssueID to the resulting Issue <ParentIID>${IID}</ParentIID>, don't forget to include ParentIID=${IID} into the Tasks DataBlock on the Node -->
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>	
      
            <!-- TASK2-->
			 	
			<IncAttribute Name="PROTASKS:NumberTotal"/>
			
			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks 
				PKG=${OHP:PKG2}
				TargetMachine=${OHP:TargetMachine}      
				TargetState=Created
				User=${OHP:User}
				Lib=${OHP:Lib}
				Host=${OHP:Host}
				CurrentState=ReadState
				/> </NewBlock>]]>
			</XMLExtract>
			
			<GenerateData Alias="VAL"> 
				<!-- Independent="true" can be applied, if multiple Issues should be generated. In this case pass on the parent IssueID to the resulting Issue <ParentIID>${IID}</ParentIID>, don't forget to include ParentIID=${IID} into the Tasks DataBlock on the Node -->
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>	
      
      
      <!-- TASK3-->
      
			<IncAttribute Name="PROTASKS:NumberTotal"/>
			
			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks 
				PKG=${OHP:PKG3}
				TargetMachine=${OHP:TargetMachine}      
				TargetState=Deleted
				User=${OHP:User}
				Lib=${OHP:Lib}
				Host=${OHP:Host}
				CurrentState=ReadState
				/> </NewBlock>]]>
			</XMLExtract>
			
			<GenerateData Alias="VAL"> 
				<!-- Independent="true" can be applied, if multiple Issues should be generated. In this case pass on the parent IssueID to the resulting Issue <ParentIID>${IID}</ParentIID>, don't forget to include ParentIID=${IID} into the Tasks DataBlock on the Node -->
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>	
      
			<!--		<Resolve>Resolved initial Issue with ID ${IID}</Resolve> - use if ChildIssues are created-->
			
			<GenerateData> 
				<DataType>Resolve</DataType>
				<Status>checkForResolve</Status>
			</GenerateData>	
			
		</Activate>
	</CreateTrigger>
</KnowledgeItem>
