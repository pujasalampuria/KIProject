<KnowledgeItem ID="OpexSoftware:WorkFlowUserStory:GitHubRepoClone" xmlns="http://www.arago.de/KiSchema">
	<Title>GitHubRepoClone</Title>
	<Description>Initiates the workflow for cloning a Git Repository
	</Description>
	<BindAttributes>
		<AttributeFilter Name="NodeType" Mode="string" Value="Machine" />
	</BindAttributes>

	<Log>__KI ${KIID} is now bound to ${NODE:NodeID}__</Log>

	<CreateTrigger>
		<IssueCondition>
			<Description>Searches for an Issue with DataBlock GITCLONEREPO and
				triggers the workflow for sucessful completion</Description>
			<SubItem Name="GitCloneRepo" Alias="GITCLONEREPO">
				<AttributeFilter Name="TargetMachine" Mode="string" Value="${NODE:NodeName}" />
				<AttributeFilter Name="GitRepoUrl" Mode="exists" />
				<AttributeFilter Name="TargetPath" Mode="exists" />
				<AttributeFilter Name="GitUser" Mode="exists" />
				<AttributeFilter Name="GitPassword" Mode="exists" />
				<AttributeFilter Name="TargetState" Mode="string" Value="Created" />
				<AttributeFilter Name="Status" Mode="notexists" />
				<AttributeFilter Name="GitRepoName" Mode="exists" />
				<AttributeFilter Name="GitBranch" Mode="exists" />
				<AttributeFilter Name="GitOrigin" Mode="exists" />
			</SubItem>
		</IssueCondition>

		<Activate>
			<SetAttribute Name="GITCLONEREPO:Status" Value="WorkflowStarted" />
			<GenerateData Alias="PROTASKS">
				<DataType>ProcessingTasks</DataType>
				<CurrentTask>1</CurrentTask>
			</GenerateData>

			<!--Task1 Check if GIT package is there -->

			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetMachine=${GITCLONEREPO:TargetMachine}      
				TargetState=Created
				User=${GITCLONEREPO:User}
				Lib=PKG
				PKG=git
				Host=${GITCLONEREPO:Host}
				CurrentState=ReadState
				TaskNumber=${PROTASKS:NumberTotal}
				/> </NewBlock>]]>
			</XMLExtract>


			<GenerateData Alias="VAL">
				<!-- Independent="true" can be applied, if multiple Issues should be 
					generated. In this case pass on the parent IssueID to the resulting Issue 
					<ParentIID>${IID}</ParentIID>, don't forget to include ParentIID=${IID} into 
					the Tasks DataBlock on the Node -->
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>


			<!--Task2 Do the GIT Clone -->

			<IncAttribute Name="PROTASKS:NumberTotal" />

			<XMLExtract StoreTo="NODE:Extensions" Mode="simple"><![CDATA[<NewBlock><Tasks
				TargetPath='${GITCLONEREPO:TargetPath}'
				TargetMachine=${GITCLONEREPO:TargetMachine}
				TargetState=Created
				GitRepoURL='${GITCLONEREPO:GitRepoUrl}'
				GitRepoName=${GITCLONEREPO:GitRepoName}
				User=${GITCLONEREPO:User}
				Host=${GITCLONEREPO:Host}
				Lib=GITCLONE
				CurrentState=ReadState
                TaskNumber=${PROTASKS:NumberTotal}
                GitBranch=${GITCLONEREPO:GitBranch}
                GitOrigin=${GITCLONEREPO:GitOrigin}
				/></NewBlock>]]>
			</XMLExtract>

			<GenerateData Alias="VAL">
				<!-- Independent="true" can be applied, if multiple Issues should be 
					generated. In this case pass on the parent IssueID to the resulting Issue 
					<ParentIID>${IID}</ParentIID>, don't forget to include ParentIID=${IID} into 
					the Tasks DataBlock on the Node -->
				<DataType>Validate</DataType>
				<ExtUID>${NODE:Extensions/Tasks/UID}</ExtUID>
			</GenerateData>

			<!--<Resolve>Resolved initial Issue with ID ${IID}</Resolve> - use if 
				ChildIssues are created -->

			<GenerateData>
				<DataType>Resolve</DataType>
				<Status>checkForResolve</Status>
			</GenerateData>
		</Activate>
	</CreateTrigger>
</KnowledgeItem>
